var dependencyObservable = require( "ui/core/dependency-observable" );
var proxy = require( "ui/core/proxy" );
var stackLayout = require( "ui/layouts/stack-layout" );

function Map() {
	this.map = MKMapView.alloc().initWithFrame( UIScreen.mainScreen().bounds );

	// #1: It seems there should be an easier way to do this, and maybe there is
	// but I'm missing something. Since I added an XML element, shouldn't
	// NativeScript automatically know where this element goes?
	this.ios.addSubview( this.map );
}

// #2: I'm extending StackLayout because the example on the docs do so.
// (See http://docs.nativescript.org/ui-with-xml.html#custom-components)
// ...but I don't know why this is necessary. What do I gain from extending
// StackLayout? If I try to extend View instead, I get an error from
// this.ios.addSubview in the constructor.
Map.prototype = new stackLayout.StackLayout();

Map.prototype.updateLocation = function() {
	if ( !this.latitude || !this.longitude ) {
		return;
	}

	var location = CLLocationCoordinate2DMake( this.latitude, this.longitude ),
		span = new MKCoordinateSpan({ latitudeDelta: 0.3, longitudeDelta: 0.3 }),
		region = new MKCoordinateRegion({ center: location, span: span });

	this.map.region = region;
}

// #3: Not related to custom UI elements, but 
// [ "foo", "bar" ].forEach(function() {}) does not work in NativeScript,
// despite being completely valid JavaScript. This threw me off for several
// minutes.
var properties = [ "latitude", "longitude" ];
properties.forEach(function( name ) {

	// #4: The docs for adding properties to custom UI elements are basically
	// non-existent. For all the code below I basically had no idea what I was
	// doing and had to reference existing modules to figure out how to get
	// any of this to work.

	// #5: I found the docs on DependencyObservable and Property... but
	// I was still lost.
	// For example http://docs.nativescript.org/ApiReference/ui/core/dependency-observable/Property.html
	// “Gets the id of the property. This is used for fast lookup.”
	// Why does a property need an id? Couldn't this just be generated?
	var property = new dependencyObservable.Property(
		name,        // Name of the attribute
		"id" + name, // id? Still not sure what this is

		// #6: This constructor doesn't appear to be documented at all.
		// (See http://docs.nativescript.org/ApiReference/ui/core/dependency-observable/PropertyMetadata.html )
		// I got this working exclusively by referring to existing modules.
		// I'm not sure I'm doing it right because data binding doesn't appear to be
		// working 100%.
		new dependencyObservable.PropertyMetadata(
			0,       // default value of the attribute
			dependencyObservable.PropertyMetadataSettings.None,
			function( data ) {

				// #7: object? I think “instance” would be more clear, or maybe something else
				// “object” is so generic it conveys no meaning—it could be anything
				data.object.updateLocation();
			}
		)
	);

	// #8: I'm only doing this because the custom UI example on the docs do it
	// and the cross-platform modules do. Is this required? If so we should
	// document it.
	exports[ name + "Property" ] = property;

	// #9: I have no idea where _getValue and _setValue are coming from or why
	// I need to use them here. Again I'm just copying and pasting. But I know
	// if I remove this code data binding no longer works.
	Object.defineProperty( Map.prototype, name, {
		get: function() {
			return this._getValue( property );
		},
		set: function( value ) {
			if ( parseInt( value ) > 0 ) {
				this._setValue( property, value );
			}
		}
	});
});

exports.Map = Map;
